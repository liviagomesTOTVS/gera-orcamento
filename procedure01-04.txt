CREATE OR REPLACE PROCEDURE sp_processa_orcamento (
    p_codcli           IN NUMBER,      
    p_codativ          IN VARCHAR2,    
    p_cobranca         IN VARCHAR2,    
    p_plano_pagamento  IN VARCHAR2,    
    p_funcionario      IN VARCHAR2,    
    p_rca              IN VARCHAR2,    
    p_supervisor       IN VARCHAR2,    
    p_caixa            IN VARCHAR2,    
    p_codst            IN VARCHAR2,    
    p_mensagem         IN VARCHAR2,    
    p_departamento     IN VARCHAR2,    
    p_codfilial        IN VARCHAR2,    
    p_codfilialnf      IN VARCHAR2,    
    p_limite_produtos  IN NUMBER,   
    p_valor_max_orcamento IN VARCHAR2, 
    p_tipo_preco IN VARCHAR2,
    p_numorcas OUT VARCHAR2
) AS
    l_codativ          NUMBER;
    l_cobranca         VARCHAR2(4);  
    l_plano_pagamento  NUMBER;
    l_rca              NUMBER;
    l_supervisor       NUMBER;
    l_codfilial        NUMBER;
    l_codfilialnf      NUMBER;

    v_valor_max_orcamento NUMBER;

    v_cliente          PCCLIENT%ROWTYPE;
    v_data             DATE := SYSDATE;
    v_numorcamento     NUMBER(10);
    v_seq              NUMBER;
    v_contador         NUMBER := 0;
    v_item_orcamento   NUMBER := 0;
    v_lista_produtos   VARCHAR2(4000) := '';
    vsexisteregistros  VARCHAR2(1) := 'N';
    v_valor_total      NUMBER := 0;
    v_valor_item       NUMBER;

    v_produto          VARCHAR2(4000);
    v_codprod          NUMBER;
    v_qtunitemb        NUMBER;
    v_qtestoque        NUMBER;
    v_punit            NUMBER;
    v_ptabela          NUMBER;
    v_codst            NUMBER;
    v_numseq           NUMBER;

BEGIN
    -- Inicializa a variável de saída
    p_numorcas := '';
    
    -- Validação da mensagem
    IF p_mensagem IS NULL OR REGEXP_COUNT(p_mensagem, '[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*\|[^|]*') = 0 THEN
        RAISE_APPLICATION_ERROR(-20006, 'Formato inválido ou vazio em p_mensagem: ' || NVL(p_mensagem, 'NULL'));
    END IF;

    -- Conversão de parâmetros
    BEGIN
        l_codativ         := TO_NUMBER(p_codativ);
        l_cobranca        := p_cobranca;
        l_plano_pagamento := TO_NUMBER(p_plano_pagamento);
        l_rca             := TO_NUMBER(p_rca);
        l_supervisor      := TO_NUMBER(p_supervisor);
        l_codfilial       := TO_NUMBER(p_codfilial);
        l_codfilialnf     := TO_NUMBER(p_codfilialnf);
        v_valor_max_orcamento := TO_NUMBER(NVL(TRIM(p_valor_max_orcamento), '10000'));
    EXCEPTION 
        WHEN VALUE_ERROR THEN
            RAISE_APPLICATION_ERROR(-20001, 'Erro de conversão de parâmetros para número: ' || SQLERRM);
    END;

    -- Obter dados do cliente
    BEGIN
        SELECT *
          INTO v_cliente
          FROM PCCLIENT
         WHERE CODCLI = p_codcli;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE_APPLICATION_ERROR(-20004, 'Cliente não encontrado para CODCLI: ' || p_codcli);
        WHEN TOO_MANY_ROWS THEN
            RAISE_APPLICATION_ERROR(-20005, 'Múltiplos clientes encontrados para CODCLI: ' || p_codcli);
    END;

    -- Processar cada produto da mensagem
    FOR i IN 1..REGEXP_COUNT(p_mensagem, ';') + 1 LOOP
        v_produto := REGEXP_SUBSTR(p_mensagem, '[^;]+', 1, i);
        IF v_produto IS NOT NULL THEN
            BEGIN
                -- Extrair dados do produto
                v_codprod   := TO_NUMBER(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 1));
                v_qtunitemb := TO_NUMBER(REPLACE(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 2), '.', ','));
                v_qtestoque := TO_NUMBER(REPLACE(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 3), '.', ','));
                v_punit     := TO_NUMBER(REPLACE(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 4), '.', ','));
                v_ptabela   := TO_NUMBER(REPLACE(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 5), '.', ','));
                v_codst     := TO_NUMBER(REGEXP_SUBSTR(v_produto, '[^|]+', 1, 6));
                
                -- Definir preço conforme tipo
                IF p_tipo_preco = 'C' THEN
                    v_punit := v_punit; -- Preço de custo
                ELSIF p_tipo_preco = 'V' THEN
                    v_punit := CASE WHEN v_ptabela > 0 THEN v_ptabela ELSE v_punit END; -- Preço de venda ou custo
                ELSE
                    v_punit := CASE WHEN v_ptabela > 0 THEN v_ptabela ELSE v_punit END; -- Default: venda ou custo
                END IF;

                -- Validar quantidade
                IF v_qtestoque <= 0 THEN
                    DBMS_OUTPUT.PUT_LINE('Item CODPROD=' || v_codprod || ' com quantidade zero ou negativa. Pulando item.');
                    CONTINUE;
                END IF;

                -- Calcular valor do item
                v_valor_item := v_punit * v_qtestoque;

                -- Verificar se precisa criar novo orçamento
                IF v_contador = 0 OR MOD(v_contador, p_limite_produtos) = 0 THEN
                    -- Validar valor do item
                    IF v_valor_item <= 0 THEN
                        DBMS_OUTPUT.PUT_LINE('Item CODPROD=' || v_codprod || ' geraria orçamento negativo ou zero. Pulando item.');
                        CONTINUE;
                    END IF;

                    IF v_valor_item > v_valor_max_orcamento THEN
                        DBMS_OUTPUT.PUT_LINE('Item CODPROD=' || v_codprod || ' excede o limite de valor. Pulando item.');
                        CONTINUE;
                    END IF;

                    -- Obter próximo número de orçamento
                    BEGIN
                        SELECT PCUSUARI.PROXNUMPEDFORCA 
                          INTO v_numorcamento 
                          FROM PCUSUARI 
                         WHERE CODUSUR = l_rca;
                    EXCEPTION
                        WHEN NO_DATA_FOUND THEN
                            RAISE_APPLICATION_ERROR(-20007, 'Usuário não encontrado para CODUSUR: ' || l_rca);
                    END;

                    -- Atualizar próximo número
                    UPDATE PCUSUARI 
                       SET PROXNUMPEDFORCA = PROXNUMPEDFORCA + 1 
                     WHERE CODUSUR = l_rca;

                    -- Obter sequência para pré-venda
                    SELECT DFSEQ_PCORCAVENDACPREVENDA.NEXTVAL 
                      INTO v_seq 
                      FROM DUAL;

                    -- Inserir cabeçalho do orçamento
                    INSERT INTO PCORCAVENDAC (
                        NUMORCA, DATA, CODCLI, CODUSUR, DTENTREGA, CODFILIAL, CODFILIALNF, TIPOVENDA, 
                        CODPRACA, CODEMITENTE, POSICAO, OPERACAO, NUMCAR, CODCOB, HORA, MINUTO, 
                        CODSUPERVISOR, CONDVENDA, PERCVENDA, CODPLPAG, CODATV1, ORCAMENTOUTILIZADO, 
                        ORIGEMPED, GERACP, DUPLICADO, TIPODOC, VENDATRIANGULAR, NUMPREVENDA, 
                        FUT_DATACRIACAO, ROTINALANC
                    ) VALUES (
                        v_numorcamento, v_data, v_cliente.CODCLI, l_rca, v_data, l_codfilial, 
                        l_codfilialnf, 'V', v_cliente.CODPRACA, '1', 'L', 'N', '0', l_cobranca, 
                        TO_CHAR(v_data, 'HH24'), TO_CHAR(v_data, 'MI'), l_supervisor, 1, 100, 
                        l_plano_pagamento, v_cliente.CODATV1, 'N', 'A', 'N', 'N', 'O', 'N', 
                        v_seq, v_data, '9801'
                    );

                    DBMS_OUTPUT.PUT_LINE('Cabeçalho do orçamento criado: ' || v_numorcamento);
                    
                    -- Adicionar ao output
                    IF p_numorcas IS NOT NULL THEN
                        p_numorcas := p_numorcas || ',';
                    END IF;
                    p_numorcas := p_numorcas || TO_CHAR(v_numorcamento);
                    
                    -- Resetar contador de itens para o novo orçamento
                    v_item_orcamento := 0;
                    vsexisteregistros := 'N';
                END IF;

                -- Incrementar contador de itens
                v_item_orcamento := v_item_orcamento + 1;
                v_numseq := v_item_orcamento;

                -- Inserir item do orçamento
                INSERT INTO PCORCAVENDAI (
                    NUMORCA, DATA, CODCLI, CODPROD, CODUSUR, QT, QTUNITEMB, ST, PVENDA, PTABELA, 
                    PERDESC, POSICAO, NUMCAR, NUMSEQ, CODST, PORIGINAL, DTULTALTER, VLCUSTOFIN, 
                    VLCUSTOREAL, PERCOM, BAIXADO
                ) VALUES (
                    v_numorcamento, v_data, v_cliente.CODCLI, v_codprod, l_rca, 
                    v_qtestoque, v_qtunitemb, '0', v_punit, v_ptabela,
                    80, 'L', '0', v_numseq, 
                    v_codst, v_ptabela, SYSDATE, 0, 0, 0, 'N'
                );

                DBMS_OUTPUT.PUT_LINE('Item inserido: Orçamento=' || v_numorcamento || 
                                     ', Produto=' || v_codprod || ', Seq=' || v_numseq);
                
                vsexisteregistros := 'S';
                v_contador := v_contador + 1;

                -- Atualizar informações adicionais do item
                FOR registros IN (
                    SELECT 
                        pcorcavendai.codprod,
                        pcorcavendai.numseq,
                        NVL(NVL(pcest.custofin, pcest.custocont), 0.01) AS custofin,
                        NVL(NVL(pcest.custoreal, pcest.custocont), 0.01) AS custoreal,
                        pcprodut.pesobruto,
                        NVL(VIEWMENOREMBALAGEM.codauxiliar, pcprodut.codauxiliar) AS codauxiliar,
                        NVL(VIEWMENOREMBALAGEM.qtunit, pcprodut.qtunit) AS qtunit,
                        pcprodut.tipomerc
                    FROM pcorcavendai,
                         pcest,
                         pcprodut,
                         VIEWMENOREMBALAGEM
                    WHERE pcorcavendai.codprod = pcprodut.codprod
                      AND pcorcavendai.codprod = pcest.codprod  
                      AND pcorcavendai.numorca = v_numorcamento
                      AND pcorcavendai.numseq = v_numseq
                      AND pcest.codfilial = l_codfilial
                      AND pcest.codprod = VIEWMENOREMBALAGEM.codprod(+)
                      AND pcest.codfilial = VIEWMENOREMBALAGEM.codfilial(+)
                ) LOOP
                    UPDATE PCORCAVENDAI
                       SET vlcustofin = registros.custofin,
                           vlcustoreal = registros.custoreal,
                           pesobruto = registros.pesobruto,
                           tipomerc = registros.tipomerc,
                           codauxiliar = registros.codauxiliar,
                           qtunitemb = registros.qtunit
                     WHERE numorca = v_numorcamento
                       AND numseq = v_numseq;
                END LOOP;
            EXCEPTION
                WHEN OTHERS THEN
                    DBMS_OUTPUT.PUT_LINE('Erro ao processar produto: ' || v_produto || ' - ' || SQLERRM);
                    CONTINUE;
            END;
        END IF;
    END LOOP;

    -- Atualizar totais do orçamento
    FOR registros IN (
        SELECT 
            PCORCAVENDAC.NUMORCA,
            SUM(PCORCAVENDAI.QT * PCORCAVENDAI.PVENDA) AS VLTOTAL,
            SUM(PCORCAVENDAI.QT * PCPRODUT.PESOLIQ) AS TOTPESO,
            SUM(PCORCAVENDAI.QT * PCPRODUT.VOLUME) AS TOTVOLUME,
            SUM(PCORCAVENDAI.QT * PCORCAVENDAI.PTABELA) AS VLTABELA,
            COUNT(PCORCAVENDAC.NUMORCA) AS QTITENS
        FROM PCORCAVENDAC,
             PCORCAVENDAI,
             PCPRODUT
        WHERE PCORCAVENDAC.NUMORCA = PCORCAVENDAI.NUMORCA
          AND PCORCAVENDAI.CODPROD = PCPRODUT.CODPROD
          AND PCORCAVENDAC.NUMORCA IN (
              SELECT TO_NUMBER(REGEXP_SUBSTR(p_numorcas, '[^,]+', 1, LEVEL)) 
              FROM DUAL 
              CONNECT BY REGEXP_SUBSTR(p_numorcas, '[^,]+', 1, LEVEL) IS NOT NULL
          )
        GROUP BY PCORCAVENDAC.NUMORCA
    ) LOOP   
        DBMS_OUTPUT.PUT_LINE('Atualizando totais do orçamento: ' || registros.NUMORCA);
        
        UPDATE PCORCAVENDAC
           SET VLTOTAL = registros.VLTOTAL,
               VLTABELA = registros.VLTABELA,
               NUMITENS = registros.QTITENS,
               TOTPESO = registros.TOTPESO,
               TOTVOLUME = registros.TOTVOLUME,
               FUT_DATACRIACAO = SYSDATE
         WHERE NUMORCA = registros.NUMORCA;
    END LOOP;

    -- Remover orçamentos sem itens
    FOR registros IN (
        SELECT NUMORCA 
        FROM PCORCAVENDAC 
        WHERE NUMORCA IN (
            SELECT TO_NUMBER(REGEXP_SUBSTR(p_numorcas, '[^,]+', 1, LEVEL)) 
            FROM DUAL 
            CONNECT BY REGEXP_SUBSTR(p_numorcas, '[^,]+', 1, LEVEL) IS NOT NULL
        )
        AND NOT EXISTS (
            SELECT 1 FROM PCORCAVENDAI WHERE NUMORCA = PCORCAVENDAC.NUMORCA
        )
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('Removendo orçamento sem itens: ' || registros.NUMORCA);
        DELETE FROM PCORCAVENDAC WHERE NUMORCA = registros.NUMORCA;
        
        -- Remover da lista de retorno
        p_numorcas := REGEXP_REPLACE(p_numorcas, '(^|,)' || registros.NUMORCA || '(,|$)', '\1');
    END LOOP;
    
    -- Remover vírgulas extras
    p_numorcas := REGEXP_REPLACE(p_numorcas, '^,|,$', '');
    p_numorcas := REGEXP_REPLACE(p_numorcas, ',{2,}', ',');

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Processamento concluído. Orçamentos criados: ' || NVL(p_numorcas, 'Nenhum'));
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Erro na procedure: ' || SQLERRM);
        RAISE;
END sp_processa_orcamento;